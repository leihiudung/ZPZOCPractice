
struct __ViewController__defineNormalLocalWithAllGlobalParamsBlock_block_impl_0 {
    struct __block_impl impl;
    struct __ViewController__defineNormalLocalWithAllGlobalParamsBlock_block_desc_0* Desc;
    __ViewController__defineNormalLocalWithAllGlobalParamsBlock_block_impl_0(void *fp, struct __ViewController__defineNormalLocalWithAllGlobalParamsBlock_block_desc_0 *desc, int flags=0) {
    impl.isa = &_NSConcreteStackBlock;
    impl.Flags = flags;
    impl.FuncPtr = fp;
    Desc = desc;
    }
};
static void __ViewController__defineNormalLocalWithAllGlobalParamsBlock_block_func_0(struct __ViewController__defineNormalLocalWithAllGlobalParamsBlock_block_impl_0 *__cself) {

    NSLog((NSString *)&__NSConstantStringImpl__var_folders_hk_zhxz0gtj7z1djqcl5mbjdpd00000gn_T_ViewController_2b731a_mi_6,globalVar,globalStatic);
}

static struct __ViewController__defineNormalLocalWithAllGlobalParamsBlock_block_desc_0 {
    size_t reserved;
    size_t Block_size;
} __ViewController__defineNormalLocalWithAllGlobalParamsBlock_block_desc_0_DATA = { 0, sizeof(struct __ViewController__defineNormalLocalWithAllGlobalParamsBlock_block_impl_0)};

static void _I_ViewController_defineNormalLocalWithAllGlobalParamsBlock(ViewController * self, SEL _cmd) {
    void(*testBlock)(void) = ((void (*)())&__ViewController__defineNormalLocalWithAllGlobalParamsBlock_block_impl_0((void *)__ViewController__defineNormalLocalWithAllGlobalParamsBlock_block_func_0, &__ViewController__defineNormalLocalWithAllGlobalParamsBlock_block_desc_0_DATA));
    ((void (*)(__block_impl *))((__block_impl *)testBlock)->FuncPtr)((__block_impl *)testBlock);
}

说明：可以看到这里block里虽然引用了两个全局变量和全局静态变量，但是在调用的时候并没有传递，而是直接使用了
    因为全局变量存储在静态数据存储区，在程序结束前不会被销毁，所以block可以直接访问
